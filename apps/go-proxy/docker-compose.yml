version: "3.8"

services:
  redis-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "9090:9090" # Metrics port
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - REDIS_CLUSTER_MODE=false
      - REDIS_TLS_ENABLED=false
      - PORT=8080
      - AUTH_TOKEN=${AUTH_TOKEN:-your-secret-token}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - ENABLE_HMAC=false
      - HMAC_SECRET=${HMAC_SECRET:-your-hmac-secret}
      - MAX_RETRIES=3
      - READ_TIMEOUT=30s
      - WRITE_TIMEOUT=30s
      - POOL_SIZE=20
      - MAX_CONN_AGE=30m
      - IDLE_TIMEOUT=5m
      - ENABLE_PIPELINE=true
      - ENABLE_STREAMING=true
      - ENABLE_READ_REPLICAS=true
      - READ_REPLICA_NODES=redis-replica-1:6379,redis-replica-2:6379
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_RPS=1000
      - RATE_LIMIT_BURST=100
      - ADAPTIVE_RATE_LIMIT=true
      - METRICS_ENABLED=true
      - LOG_LEVEL=info
      - ENABLE_LOCAL_CACHE=true
      - CACHE_TTL=5m
      - CACHE_SIZE=10000
      - HEALTH_CHECK_INTERVAL=30s
    depends_on:
      - redis
      - redis-replica-1
      - redis-replica-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - redis-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - redis-network

  redis-replica-1:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: >
      redis-server
      --replicaof redis 6379
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-replica-1-data:/data
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - redis-network

  redis-replica-2:
    image: redis:7-alpine
    ports:
      - "6381:6379"
    command: >
      redis-server
      --replicaof redis 6379
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-replica-2-data:/data
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - redis-network

  # Redis Cluster setup (alternative configuration)
  redis-cluster:
    image: redis:7-alpine
    profiles:
      - cluster
    ports:
      - "7000-7005:7000-7005"
    command: >
      sh -c "
        mkdir -p /data/cluster &&
        for port in 7000 7001 7002 7003 7004 7005; do
          mkdir -p /data/cluster/$$port &&
          redis-server --port $$port --cluster-enabled yes --cluster-config-file /data/cluster/$$port/nodes.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-$$port.aof --dbfilename dump-$$port.rdb --logfile /data/cluster/$$port/redis-$$port.log --daemonize yes --dir /data/cluster/$$port/
        done &&
        sleep 5 &&
        redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1 --cluster-yes &&
        tail -f /data/cluster/*/redis-*.log
      "
    volumes:
      - redis-cluster-data:/data
    networks:
      - redis-network

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - redis-network

  grafana:
    image: grafana/grafana:latest
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - redis-network

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    profiles:
      - monitoring
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command:
      - "--redis.addr=redis://redis:6379"
      - "--redis.password=${REDIS_PASSWORD:-}"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - redis-network

  # Load balancer (optional)
  nginx:
    image: nginx:alpine
    profiles:
      - loadbalancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - redis-proxy
    restart: unless-stopped
    networks:
      - redis-network

volumes:
  redis-data:
    driver: local
  redis-replica-1-data:
    driver: local
  redis-replica-2-data:
    driver: local
  redis-cluster-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  redis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
